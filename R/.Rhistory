theme(axis.title = element_text(size = 20),
axis.text.y.right = element_blank(),
axis.ticks.y.right = element_blank(),
axis.text = element_text(size = 15),
legend.text = element_text(size = 15),
legend.title = element_text(size = 20),
legend.position = c(.2, .8),
plot.margin = unit(c(.5, .5, .5, .5), "cm"))
# Save for the paper
ggsave("Figures/Fig3.tiff", device = "tiff", plot = interval_plot, dpi = 300, width = 308, height = 208, units = "mm")
# Save for the manuscript
ggsave("Figures/Fig3.png", device = "png", plot = interval_plot, dpi = 300, width = 308, height = 208, units = "mm")
# Chunk 15
distinct(processed, research_type)
processed <-
processed %>%
mutate(research_type_group = case_when(research_type == "Hypothesis testing" ~ "testing",
research_type %in% c("Other", "Estimation", "Modeling", "Qualitative research", "Simulations") ~ "else"))
processed %>%
group_by(group, research_type_group) %>%
summarise(n = n())
# Chunk 16
research_type_data <-
processed %>%
filter(group == "prereg")
# Chunk 17
research_type_groups <- c("testing", "else")
# Chunk 18
research_type_questions <-
expand_grid(groups = research_type_groups,
vars = vars)
# Chunk 19
research_type_questions <-
research_type_questions %>%
mutate(var_level_present = purrr::map2(groups, vars,
~ level_present(
df = research_type_data,
group_name = .x,
var_name = .y,
factor_group = "prereg",
group_var = research_type_groups)),
var_level_labels = purrr::map2(groups, vars,
~ get_levels(
df = research_type_data,
group_name = .x,
var_name = .y,
factor_group = "prereg",
group_var = research_type_groups)))
# Chunk 20
research_type_questions <-
research_type_questions %>%
mutate(var_desc = purrr::map2(groups, vars,
~ level_count(
df = research_type_data,
group_name = .x,
var_name = .y,
group_var = research_type_group,
factor_group = "prereg")))
# Chunk 21
research_type_questions_table <-
research_type_questions %>%
select(groups, vars, var_desc) %>%
unnest(var_desc) %>%
dplyr::group_by(groups, vars) %>%
dplyr::mutate(N = sum(n),
prop = round(n / N * 100, 2)) %>%
select(-N, -levels_int) %>%
mutate(vars = vars_rename(vars)) %>%
arrange(vars, groups) %>%
rename(`Survey question` = vars,
Group = groups,
Levels = levels,
`Number of responses` = n,
`Proportion of the level` = prop)
# Chunk 22
papaja::apa_table(
research_type_questions_table,
caption = "A Full Summary of All Survey Questions Per Research Type for Preregistration Group",
escape = TRUE
)
# Chunk 23
research_type_questions <-
research_type_questions %>%
mutate(plot = map2(groups, vars,
~ apa_barplot(
df = research_type_data,
group_name = .x,
var-name = .y,
group_var = research_type_group,
factor_group = "prereg")))
research_type_questions$plot
# Chunk 24
# Create the plot
research_type_likert_plot_a <- likert_plot_odd(research_type_questions, likert_plot_vars_a, limits = c(-0.5, 1), text_push = 0.02)
# Save for the paper
ggsave("Figures/Fig3.tiff", device = "tiff", plot = likert_plot_a, dpi = 300, width = 308, height = 208, units = "mm")
# Save for the manuscript
ggsave("Figures/Fig3.png", device = "png", plot = likert_plot_a, dpi = 300, width = 308, height = 208, units = "mm")
# Chunk 25
# Create the plot
research_type_likert_plot_b <- likert_plot_odd(research_type_questions, likert_plot_vars_b, limits = c(-0.5, 1), text_push = 0.02)
# Save for the paper
ggsave("Figures/Fig4.tiff", device = "tiff", plot = likert_plot_b, dpi = 300, width = 308, height = 208, units = "mm")
# Save for the manuscript
ggsave("Figures/Fig4.png", device = "png", plot = likert_plot_b, dpi = 300, width = 308, height = 208, units = "mm")
rm(list=ls())
library(multibridge)
?mult_bf_equality
data(lifestresses)
x <- lifestresses$stress.freq
a <- rep(1, nrow(lifestresses))
mult_bf_equality(x=x, a=a, p = 'hello')
mult_bf_equality(x=x, a=a, p = rep('hello', length(x)))
rep(1/length(x))
rep(1/length(x), length(x))
as.integer(rep(1/length(x), length(x)))
is.numeric(as.integer(rep(1/length(x), length(x))))
integer(5)
is.numeric(integer(5))
?binom.test
binom.test(c(682, 243), p = 4)
.checkProbability <- function(p, x = NULL, mult = TRUE){
# in multinomial test, p is a probability vector
if(mult){
if(!is.numeric(p)){
stop("p must be a numeric vector.")
}
if(any(p < 0)){
stop("Probabilities must be non-negative.")
}
if(length(x) != length(p)){
stop("p and counts are not of the same length. ")
}
if(sum(p) != 1){
p <- p/sum(p)
warning("Parameters have been rescaled.")
}
} else {
if(!is.numeric(p) | length(p) != 1 | p < 0 | p > 1){
stop("p must be a single number between 0 and 1")
}
}
return(p)
}
.checkProbability(p = 3, mult=FALSE)
.checkProbability(p = -3, mult=FALSE)
.checkProbability(p = c(1, 1, 1), mult=FALSE)
.checkProbability <- function(p, x = NULL, mult = TRUE){
# in multinomial test, p is a probability vector
if(mult){
if(!is.numeric(p)){
stop("p must be a numeric vector.")
}
if(any(p < 0)){
stop("Probabilities must be non-negative.")
}
if(length(x) != length(p)){
stop("p and counts are not of the same length. ")
}
if(sum(p) != 1){
p <- p/sum(p)
warning("Parameters have been rescaled.")
}
} else {
if(length(p) != 1 | !is.numeric(p) | p < 0 | p > 1){
stop("p must be a single number between 0 and 1")
}
}
return(p)
}
.checkProbability(p = c(1, 1, 1), mult=FALSE)
.checkProbability <- function(p, x = NULL, mult = TRUE){
# in multinomial test, p is a probability vector
if(mult){
if(!is.numeric(p)){
stop("p must be a numeric vector.")
}
if(any(p < 0)){
stop("Probabilities must be non-negative.")
}
if(length(x) != length(p)){
stop("p and counts are not of the same length. ")
}
if(sum(p) != 1){
p <- p/sum(p)
warning("Parameters have been rescaled.")
}
} else {
if(length(p) != 1){
stop("p must be a single number between 0 and 1")
}
if(!is.numeric(p) | p < 0 | p > 1) {
stop("p must be a single number between 0 and 1")
}
}
return(p)
}
.checkProbability(p = c(1, 1, 1), mult=FALSE)
.checkProbability(p = c('hi'), mult=FALSE)
.checkProbability(p = data.frame('1'), mult=FALSE)
.checkProbability(p = data.frame(1), mult=FALSE)
.checkProbability(p = matrix(1), mult=FALSE)
matrix(1)
is.numeric(matrix(1))
as.numeric(matrix(1))
as.numeric(matrix(c(1, 1, 1, 1))
)
as.numeric(matrix(c(1, 1, 1, 1)))
is.numeric(matrix(c(1, 1, 1, 1)))
any(is.numeric(matrix(c(1, 1, 1, 1)))) < 0
.checkProbability <- function(p, x = NULL, mult = TRUE){
# in multinomial test, p is a probability vector
if(mult){
if(!is.numeric(p)){
stop("p must be a numeric vector.")
}
if(any(p < 0)){
stop("Probabilities must be non-negative.")
}
if(length(x) != length(p)){
stop("p and counts are not of the same length. ")
}
if(sum(p) != 1){
p <- p/sum(p)
warning("Parameters have been rescaled.")
}
} else {
if(length(p) != 1){
stop("p must be a single number between 0 and 1")
}
if(!is.numeric(p) | p < 0 | p > 1) {
stop("p must be a single number between 0 and 1")
}
}
# in case user provides matrix, this will transform it into a single value
p <- as.numeric(p)
return(p)
}
.checkProbability(p = matrix(1), mult=FALSE)
.checkProbability(p = 0, mult=FALSE)
.checkProbability(p = -0.3, mult=FALSE)
.checkProbability(p = -0.3, mult=TRUE)
.checkProbability(p = -0.3, x = 3, mult=TRUE)
.checkProbability(p = -0.3, x = c(3,3,3), mult=TRUE)
.checkProbability(p = 0.3, x = c(3,3,3), mult=TRUE)
.checkProbability(p = c(15, -Inf, 0.3), x = c(3,3,3), mult=TRUE)
.checkProbability(p = c(15, Inf, 0.3), x = c(3,3,3), mult=TRUE)
# Savage-Dickey density ration
dbeta(0.5, 1, 1)/dbeta(0.5, 1 + 3, 1 + 9)
# Savage-Dickey density ration
dbeta(0.5, 1, 1)/dbeta(0.5, 1 + 3, 1 + 9)
# ml: He
mlHe <- choose(3,9) * beta(1 + 3, 1 + 9)/beta(1, 1)
mlH0 <- choose(3,9) * 0.5^(1 + 3 - 1) * (1-0.5)^(9 + 1)
mlH0/mlHe
mlHe
choose(3,9)
# ml: He
mlHe <- choose(9,3) * beta(1 + 3, 1 + 9)/beta(1, 1)
mlH0 <- choose(9,3) * 0.5^(1 + 3 - 1) * (1-0.5)^(9 + 1)
mlH0/mlHe
mlHe/mlH0
beta(1 + 3, 1 + 9)/beta(1, 1)
mlH0 <- choose(9,3) * 0.5^(1 + 3 - 1) * (1-0.5)^(9 + 1 - 1)
mlHe/mlH0
# shorter form
mlHe <- beta(1 + 3, 1 + 9)/beta(1, 1)
mlH0 <- 0.5^(1 + 3 - 1) * (1-0.5)^(9 + 1 - 1)
mlHe/mlH0
?lbeta
#'
#' @family functions to evaluate informed hypotheses
#' @examples
#' data(journals)
#' x <- journals$errors
#' n <- journals$nr_NHST
#' a <- rep(1, nrow(journals))
#' b <- rep(1, nrow(journals))
#' binom_bf_equality(x=x, n=n, a=a, b=b)
#' @export
binom_bf_equality <- function(x, n=NULL, a, b, p = NULL){
# Check user input
userInput <- .checkIfXIsVectorOrTable(x, n)
counts    <- userInput$counts
total     <- userInput$total
.checkAlphaAndData(alpha=a, beta=b, counts=counts, total=total)
# compute Bayes factor
lbeta.xa.He <- sum(lbeta(counts + a, total - counts + b ))
lbeta.a.He  <- sum(lbeta(a, b))
if(is.null(p)){
lbeta.xa.H0 <- lbeta(sum(counts) + sum(a) - length(a) + 1, sum(total) - sum(counts) + sum(b) - length(b) + 1)
lbeta.a.H0  <- lbeta(sum(a) - length(a) + 1, sum(b) - length(b) + 1)
logBFe0     <-  (lbeta.xa.He-lbeta.a.He) - (lbeta.xa.H0-lbeta.a.H0)
} else {
p <- .checkProbability(p=p, mult=FALSE)
lbeta.xa.He <- sum(lbeta(counts + a, total - counts + b ))
lbeta.a.He  <- sum(lbeta(a, b))
if (p == 0 && sum(counts) == 0) {
# in this case, counts*log(p) should be zero, omit to avoid numerical issue with log(0)
loglikelihood.H0 <- log(1 - p)*(sum(total) - sum(counts))
} else if (p == 1 && sum(counts) == sum(total)) {
# in this case, (n - counts)*log(1 - p) should be zero, omit to avoid numerical issue with log(0)
loglikelihood.H0 <- log(p)*sum(counts)
} else {
loglikelihood.H0 <- log(p)*sum(counts) - log(1 - p)*(sum(total) - sum(counts))
}
logBFe0 <- (lbeta.xa.He - lbeta.a.He) - loglikelihood.H0
}
bf <- data.frame(LogBFe0 = logBFe0,
BFe0    = exp(logBFe0),
BF0e    = 1/exp(logBFe0))
return(list(bf = bf))
}
binom_bf_equality(3, 12, 1, 1, 0.5)
binom_bf_equality <- function(x, n=NULL, a, b, p = NULL){
# Check user input
counts    <- n
total     <- n - x
# compute Bayes factor
lbeta.xa.He <- sum(lbeta(counts + a, total - counts + b ))
lbeta.a.He  <- sum(lbeta(a, b))
if(is.null(p)){
lbeta.xa.H0 <- lbeta(sum(counts) + sum(a) - length(a) + 1, sum(total) - sum(counts) + sum(b) - length(b) + 1)
lbeta.a.H0  <- lbeta(sum(a) - length(a) + 1, sum(b) - length(b) + 1)
logBFe0     <-  (lbeta.xa.He-lbeta.a.He) - (lbeta.xa.H0-lbeta.a.H0)
} else {
lbeta.xa.He <- sum(lbeta(counts + a, total - counts + b ))
lbeta.a.He  <- sum(lbeta(a, b))
if (p == 0 && sum(counts) == 0) {
# in this case, counts*log(p) should be zero, omit to avoid numerical issue with log(0)
loglikelihood.H0 <- log(1 - p)*(sum(total) - sum(counts))
} else if (p == 1 && sum(counts) == sum(total)) {
# in this case, (n - counts)*log(1 - p) should be zero, omit to avoid numerical issue with log(0)
loglikelihood.H0 <- log(p)*sum(counts)
} else {
loglikelihood.H0 <- log(p)*sum(counts) - log(1 - p)*(sum(total) - sum(counts))
}
logBFe0 <- (lbeta.xa.He - lbeta.a.He) - loglikelihood.H0
}
bf <- data.frame(LogBFe0 = logBFe0,
BFe0    = exp(logBFe0),
BF0e    = 1/exp(logBFe0))
return(list(bf = bf))
}
binom_bf_equality(3, 12, 1, 1, 0.5)
binom_bf_equality <- function(x, n=NULL, a, b, p = NULL){
# Check user input
counts    <- x
total     <- n - x
# compute Bayes factor
lbeta.xa.He <- sum(lbeta(counts + a, total - counts + b ))
lbeta.a.He  <- sum(lbeta(a, b))
if(is.null(p)){
lbeta.xa.H0 <- lbeta(sum(counts) + sum(a) - length(a) + 1, sum(total) - sum(counts) + sum(b) - length(b) + 1)
lbeta.a.H0  <- lbeta(sum(a) - length(a) + 1, sum(b) - length(b) + 1)
logBFe0     <-  (lbeta.xa.He-lbeta.a.He) - (lbeta.xa.H0-lbeta.a.H0)
} else {
lbeta.xa.He <- sum(lbeta(counts + a, total - counts + b ))
lbeta.a.He  <- sum(lbeta(a, b))
if (p == 0 && sum(counts) == 0) {
# in this case, counts*log(p) should be zero, omit to avoid numerical issue with log(0)
loglikelihood.H0 <- log(1 - p)*(sum(total) - sum(counts))
} else if (p == 1 && sum(counts) == sum(total)) {
# in this case, (n - counts)*log(1 - p) should be zero, omit to avoid numerical issue with log(0)
loglikelihood.H0 <- log(p)*sum(counts)
} else {
loglikelihood.H0 <- log(p)*sum(counts) - log(1 - p)*(sum(total) - sum(counts))
}
logBFe0 <- (lbeta.xa.He - lbeta.a.He) - loglikelihood.H0
}
bf <- data.frame(LogBFe0 = logBFe0,
BFe0    = exp(logBFe0),
BF0e    = 1/exp(logBFe0))
return(list(bf = bf))
}
binom_bf_equality(3, 12, 1, 1, 0.5)
x = 3
n = 12
a = 1
b = 1
p = 0.5
# Check user input
counts    <- x
total     <- n - x
# compute Bayes factor
lbeta.xa.He <- sum(lbeta(counts + a, total - counts + b ))
lbeta.a.He  <- sum(lbeta(a, b))
p == 0 && sum(counts) == 0
p == 1 && sum(counts) == sum(total)
loglikelihood.H0 <- log(p)*sum(counts) - log(1 - p)*(sum(total) - sum(counts))
sum(counts)
loglikelihood.H0
exp(loglikelihood.H0)
(lbeta.xa.He - lbeta.a.He)
(lbeta.xa.He - lbeta.a.He) - loglikelihood.H0
logBFe0 <- (lbeta.xa.He - lbeta.a.He) - loglikelihood.H0
1/exp(logBFe0)
0.5^(1 + 3 - 1) * (1-0.5)^(9 + 1 - 1)
log(0.5^(1 + 3 - 1) * (1-0.5)^(9 + 1 - 1))
mlH0 <- 0.5^(3) * (1-0.5)^(9)
mlHe/mlH0
# shorter form
mlHe <- beta(1 + 3, 1 + 9)/beta(1, 1)
mlH0 <- 0.5^(3) * (1-0.5)^(9)
mlHe/mlH0
mlH0
log(mlH0)
loglikelihood.H0
counts
log(p)*sum(counts)
log(1 - p)*(sum(total) - sum(counts))
log(p)*sum(counts) + log(1 - p)*(sum(total) - sum(counts))
loglikelihood.H0 <- log(p)*sum(counts) + log(1 - p)*(sum(total) - sum(counts))
exp(loglikelihood.H0)
mlH0
p
counts
log(p)*sum(counts)
0.5^(3)
exp(log(p)*sum(counts))
(1-0.5)^(9)
exp(log(1 - p)*(sum(total) - sum(counts)))
total
total - counts
counts
total     <- n
log(1 - p)*(sum(total) - sum(counts))
log(p)*sum(counts) + log(1 - p)*(sum(total) - sum(counts))
loglikelihood.H0 <- log(p)*sum(counts) + log(1 - p)*(sum(total) - sum(counts))
loglikelihood.H0
exp(loglikelihood.H0)
logBFe0 <- (lbeta.xa.He - lbeta.a.He) - loglikelihood.H0
1/exp(logBFe0)
exp(logBFe0)
loglikelihood.H0 <- log(p)*sum(counts) - log(1 - p)*(sum(total) - sum(counts))
logBFe0 <- (lbeta.xa.He - lbeta.a.He) - loglikelihood.H0
bf <- data.frame(LogBFe0 = logBFe0,
BFe0    = exp(logBFe0),
BF0e    = 1/exp(logBFe0))
bf
loglikelihood.H0 <- log(p)*sum(counts) + log(1 - p)*(sum(total) - sum(counts))
logBFe0 <- (lbeta.xa.He - lbeta.a.He) - loglikelihood.H0
bf <- data.frame(LogBFe0 = logBFe0,
BFe0    = exp(logBFe0),
BF0e    = 1/exp(logBFe0))
bf
# shorter form
mlHe <- beta(1 + 3, 1 + 9)/beta(1, 1)
mlH0 <- 0.5^(3) * (1-0.5)^(9)
mlHe/mlH0
mlHe
(lbeta.xa.He - lbeta.a.He)
exp(lbeta.xa.He - lbeta.a.He)
# compute Bayes factor
lbeta.xa.He <- sum(lbeta(counts + a, total - counts + b ))
lbeta.a.He  <- sum(lbeta(a, b))
lbeta(a, b)
log()
log(1)
lbeta(counts + a, total - counts + b )
beta(counts + a, total - counts + b )
beta(1 + 3, 1 + 9)
# shorter form
mlHe <- beta(1 + 3, 1 + 9)/beta(1, 1)
mlHe
(lbeta.xa.He - lbeta.a.He)
exp(lbeta.xa.He - lbeta.a.He)
# shorter form
mlHe <- beta(1 + 3, 1 + 9)/beta(1, 1)
mlH0 <- 0.5^(3) * (1-0.5)^(9)
mlHe
mlH0
exp(lbeta.xa.He - lbeta.a.He)
exp(loglikelihood.H0)
logBFe0 <- (lbeta.xa.He - lbeta.a.He) - loglikelihood.H0
mlHe/mlH0
exp(logBFe0)
binom_bf_equality <- function(x, n=NULL, a, b, p = NULL){
# Check user input
counts    <- x
total     <- n
# compute Bayes factor
lbeta.xa.He <- sum(lbeta(counts + a, total - counts + b ))
lbeta.a.He  <- sum(lbeta(a, b))
if(is.null(p)){
lbeta.xa.H0 <- lbeta(sum(counts) + sum(a) - length(a) + 1, sum(total) - sum(counts) + sum(b) - length(b) + 1)
lbeta.a.H0  <- lbeta(sum(a) - length(a) + 1, sum(b) - length(b) + 1)
logBFe0     <-  (lbeta.xa.He-lbeta.a.He) - (lbeta.xa.H0-lbeta.a.H0)
} else {
if (p == 0 && sum(counts) == 0) {
# in this case, counts*log(p) should be zero, omit to avoid numerical issue with log(0)
loglikelihood.H0 <- log(1 - p)*(sum(total) - sum(counts))
} else if (p == 1 && sum(counts) == sum(total)) {
# in this case, (n - counts)*log(1 - p) should be zero, omit to avoid numerical issue with log(0)
loglikelihood.H0 <- log(p)*sum(counts)
} else {
loglikelihood.H0 <- log(p)*sum(counts) + log(1 - p)*(sum(total) - sum(counts))
}
logBFe0 <- (lbeta.xa.He - lbeta.a.He) - loglikelihood.H0
}
bf <- data.frame(LogBFe0 = logBFe0,
BFe0    = exp(logBFe0),
BF0e    = 1/exp(logBFe0))
return(list(bf = bf))
}
binom_bf_equality(3, 12, 1, 1, p = 0.5)
binom_bf_equality(c(1,2), c(6,6), c(1,1), c(1,1), p = 0.5)
binom_bf_equality(c(3,3), c(12,12), c(1,1), c(1,1), p = 0.5)
1.43*1.43
library(testthat)
setwd("~/Git_projects/multibridge/R")
library(devtools)
