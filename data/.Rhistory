} else if (bf_type == 'BFre'){
BFinequal <- 1/exp(BFinequal)
}
BFinequal      <- paste(signif(BFinequal, 5), collapse=' ')
BFineq_message <- paste('\n\nInequality constrained Bayes factor(s):\n\n', bf_type, ':', BFinequal)
}
output <- paste('Bayes factor estimate:', bf_type, ':', bf,
'\n\nHypothesis:\n\n', hyp,
BFeq_message, BFineq_message, sep = ' ')
cat(output)
}
x$bf_list$logBFe_equalities
x$restrictions$equality_constraints$hyp
hyp_equal    <- x$restrictions$equality_constraints$hyp
hyp_list    <- x$restrictions$equality_constraints$hyp
unlist(hyp_list)
lapply(hyp_list, function(x) purrr::discard(x, '&'))
hyp_list
hyp_list[[1]]
discard(hyp_list[[1]], '&')
purrr::discard(hyp_list[[1]], '&')
?purrr::discard
purrr::discard(hyp_list, '&')
hyp_list %>% discard('&')
library(purrr)
hyp_list %>% discard('&')
hyp_list
x <- rerun(5, a = rbernoulli(1), b = sample(10))
x
purrr::discard(hyp_list, function(x) x == '&')
hyp_list[[1]]
hyp_list[[1]] %in% '&'
purrr::discard(hyp_list, function(x) x %in% '&')
lapply(hyp_list, function(x) x == '&')
lapply(hyp_list, function(x) x[!x == '&'])
hyp_list <- lapply(hyp_list, function(x) x[!x == '&'])
hyp_vec  <- sapply(hyp_list, function(x) stringr::str_c(x, collapse = ' '))
hyp_vec
output_total$bf_list
x <- output_total
# Bayes factor
bf_list <- x$bf_list
bf_type <- bf_list$bf_type
bf      <- signif(bf_list$bf[bf_type], 5)
hyp     <- paste(x$restrictions$full_model$hyp, collapse=" ")
# BF equalities
BFequal      <- x$bf_list$logBFe_equalities
nr_equal     <- length(BFequal)
BFeq_message <- NULL
if(!is.null(BFequal)){
if(bf_type == 'LogBFer') {
BFequal    <- sum(BFequal)
bf_type_eq <- 'LogBFe0'
} else if (bf_type == 'BFer'){
BFequal    <- prod(exp(BFequal))
bf_type_eq <- 'BFe0'
} else if (bf_type == 'BFre'){
BFequal    <- prod(1/exp(BFequal))
bf_type_eq <- 'BF0e'
}
BFequal      <- signif(BFequal, 5)
BFeq_message <- paste('\n\nEquality constrained Bayes factor:\n\n', bf_type_eq, ':', BFequal,
'\n\nThis Bayes factor is based on', nr_equal, 'independent equality-constrained hypotheses.')
}
# BF inequalities
BFinequal      <- x$bf_list$logBFe_inequalities[,'logBFe_inequalities']
nr_inequal     <- length(BFinequal)
BFineq_message <- NULL
if(!is.null(BFinequal)){
if(bf_type == 'LogBFer') {
BFinequal <- sum(BFinequal)
} else if (bf_type == 'BFer'){
BFinequal <- prod(exp(BFinequal))
} else if (bf_type == 'BFre'){
BFinequal <- prod(1/exp(BFinequal))
}
BFinequal      <- signif(BFinequal, 5)
BFineq_message <- paste('\n\nInequality constrained Bayes factor:\n\n', bf_type, ':', BFinequal,
'\n\nThis Bayes factor is based on', nr_equal, 'independent inequality-constrained hypotheses.')
}
output <- paste('Bayes factor estimate:', bf_type, ':', bf,
'\n\nHypothesis:\n\n', hyp,
BFeq_message, BFineq_message, sep = ' ')
cat(output)
# Bayes factor
bf_list <- x$bf_list
bf_type <- bf_list$bf_type
bf      <- signif(bf_list$bf[bf_type], 5)
hyp     <- paste(x$restrictions$full_model$hyp, collapse=" ")
# BF equalities
BFequal      <- x$bf_list$logBFe_equalities
nr_equal     <- length(BFequal)
BFeq_message <- NULL
if(!is.null(BFequal)){
if(bf_type == 'LogBFer') {
BFequal    <- sum(BFequal)
bf_type_eq <- 'LogBFe0'
} else if (bf_type == 'BFer'){
BFequal    <- prod(exp(BFequal))
bf_type_eq <- 'BFe0'
} else if (bf_type == 'BFre'){
BFequal    <- prod(1/exp(BFequal))
bf_type_eq <- 'BF0e'
}
BFequal      <- signif(BFequal, 5)
BFeq_message <- paste('\n\nEquality constrained Bayes factor:\n\n', bf_type_eq, ':', BFequal,
'\n\nBased on', nr_equal, 'independent equality-constrained hypotheses.')
}
# BF inequalities
BFinequal      <- x$bf_list$logBFe_inequalities[,'logBFe_inequalities']
nr_inequal     <- length(BFinequal)
BFineq_message <- NULL
if(!is.null(BFinequal)){
if(bf_type == 'LogBFer') {
BFinequal <- sum(BFinequal)
} else if (bf_type == 'BFer'){
BFinequal <- prod(exp(BFinequal))
} else if (bf_type == 'BFre'){
BFinequal <- prod(1/exp(BFinequal))
}
BFinequal      <- signif(BFinequal, 5)
BFineq_message <- paste('\n\nInequality constrained Bayes factor:\n\n', bf_type, ':', BFinequal,
'\n\nBased on', nr_equal, 'independent inequality-constrained hypotheses.')
}
output <- paste('Bayes factor estimate:', bf_type, ':', bf,
'\n\nHypothesis:\n\n', hyp,
BFeq_message, BFineq_message, sep = ' ')
cat(output)
# Bayes factor
bf_list <- x$bf_list
bf_type <- bf_list$bf_type
bf      <- signif(bf_list$bf[bf_type], 5)
hyp     <- paste(x$restrictions$full_model$hyp, collapse=" ")
# BF equalities
BFequal      <- x$bf_list$logBFe_equalities
nr_equal     <- length(BFequal)
BFeq_message <- NULL
if(!is.null(BFequal)){
if(bf_type == 'LogBFer') {
BFequal    <- sum(BFequal)
bf_type_eq <- 'LogBFe0'
} else if (bf_type == 'BFer'){
BFequal    <- prod(exp(BFequal))
bf_type_eq <- 'BFe0'
} else if (bf_type == 'BFre'){
BFequal    <- prod(1/exp(BFequal))
bf_type_eq <- 'BF0e'
}
BFequal      <- signif(BFequal, 5)
hypothesis   <- ifelse(nr_equal, 1, 'hypothesis', 'hypotheses')
BFeq_message <- paste('\n\nEquality constrained Bayes factor:\n\n', bf_type_eq, ':', BFequal,
'\n\nBased on', nr_equal, 'independent equality-constrained', hypothesis)
}
# BF inequalities
BFinequal      <- x$bf_list$logBFe_inequalities[,'logBFe_inequalities']
nr_inequal     <- length(BFinequal)
BFineq_message <- NULL
if(!is.null(BFinequal)){
if(bf_type == 'LogBFer') {
BFinequal <- sum(BFinequal)
} else if (bf_type == 'BFer'){
BFinequal <- prod(exp(BFinequal))
} else if (bf_type == 'BFre'){
BFinequal <- prod(1/exp(BFinequal))
}
BFinequal      <- signif(BFinequal, 5)
hypothesis     <- ifelse(nr_inequal, 1, 'hypothesis', 'hypotheses')
BFineq_message <- paste('\n\nInequality constrained Bayes factor:\n\n', bf_type, ':', BFinequal,
'\n\nBased on', nr_equal, 'independent inequality-constrained', hypothesis)
}
output <- paste('Bayes factor estimate:', bf_type, ':', bf,
'\n\nHypothesis:\n\n', hyp,
BFeq_message, BFineq_message, sep = ' ')
cat(output)
# Bayes factor
bf_list <- x$bf_list
bf_type <- bf_list$bf_type
bf      <- signif(bf_list$bf[bf_type], 5)
hyp     <- paste(x$restrictions$full_model$hyp, collapse=" ")
# BF equalities
BFequal      <- x$bf_list$logBFe_equalities
nr_equal     <- length(BFequal)
BFeq_message <- NULL
if(!is.null(BFequal)){
if(bf_type == 'LogBFer') {
BFequal    <- sum(BFequal)
bf_type_eq <- 'LogBFe0'
} else if (bf_type == 'BFer'){
BFequal    <- prod(exp(BFequal))
bf_type_eq <- 'BFe0'
} else if (bf_type == 'BFre'){
BFequal    <- prod(1/exp(BFequal))
bf_type_eq <- 'BF0e'
}
BFequal      <- signif(BFequal, 5)
hypothesis   <- ifelse(nr_equal == 1, 'hypothesis', 'hypotheses')
BFeq_message <- paste('\n\nEquality constrained Bayes factor:\n\n', bf_type_eq, ':', BFequal,
'\n\nBased on', nr_equal, 'independent equality-constrained', hypothesis)
}
# BF inequalities
BFinequal      <- x$bf_list$logBFe_inequalities[,'logBFe_inequalities']
nr_inequal     <- length(BFinequal)
BFineq_message <- NULL
if(!is.null(BFinequal)){
if(bf_type == 'LogBFer') {
BFinequal <- sum(BFinequal)
} else if (bf_type == 'BFer'){
BFinequal <- prod(exp(BFinequal))
} else if (bf_type == 'BFre'){
BFinequal <- prod(1/exp(BFinequal))
}
BFinequal      <- signif(BFinequal, 5)
hypothesis     <- ifelse(nr_inequal == 1, 'hypothesis', 'hypotheses')
BFineq_message <- paste('\n\nInequality constrained Bayes factor:\n\n', bf_type, ':', BFinequal,
'\n\nBased on', nr_equal, 'independent inequality-constrained', hypothesis)
}
output <- paste('Bayes factor estimate:', bf_type, ':', bf,
'\n\nHypothesis:\n\n', hyp,
BFeq_message, BFineq_message, sep = ' ')
cat(output)
bf_list <- x$bf_list
bf_type <- bf_list$bf_type
# Full Model
bf      <- signif(bf_list$bf[bf_type], 5)
hyp     <- paste(x$restrictions$full_model$hyp, collapse=" ")
# Equalities
BFequal      <- x$bf_list$logBFe_equalities
hyp_equal    <- .formatHypothesis(x$restrictions$equality_constraints$hyp)
.formatHypothesis <- function(hyp_list){
hyp_list <- lapply(hyp_list, function(x) x[!x == '&'])
hyp_vec  <- sapply(hyp_list, function(x) stringr::str_c(x, collapse = ' '))
return(hyp_vec)
}
hyp_equal    <- .formatHypothesis(x$restrictions$equality_constraints$hyp)
BFeq_message <- NULL
if(!is.null(BFequal)){
if(bf_type == 'LogBFer') {
BFequal    <- BFequal
bf_type_eq <- 'LogBFe0'
} else if (bf_type == 'BFer'){
BFequal    <- exp(BFequal)
bf_type_eq <- 'BFe0'
} else if (bf_type == 'BFre'){
BFequal    <- 1/exp(BFequal)
bf_type_eq <- 'BF0e'
}
BFequal      <- paste(signif(BFequal, 5), collapse=' ')
BFeq_message <- paste('\n\nEquality constrained Bayes factor(s):\n\n', bf_type_eq, ':', BFequal)
}
# Inequalities
BFinequal      <- x$bf_list$logBFe_inequalities[,'logBFe_inequalities']
hyp_inequal    <- .formatHypothesis(x$restrictions$inequality_constraints$hyp)
BFineq_message <- NULL
if(!is.null(BFinequal)){
if(bf_type == 'LogBFer') {
BFinequal <- BFinequal
} else if (bf_type == 'BFer'){
BFinequal <- exp(BFinequal)
} else if (bf_type == 'BFre'){
BFinequal <- 1/exp(BFinequal)
}
BFinequal      <- paste(signif(BFinequal, 5), collapse=' ')
BFineq_message <- paste('\n\nInequality constrained Bayes factor(s):\n\n', bf_type, ':', BFinequal,
'\n\nPercentage Error: ', BFineq_errors)
}
output <- list(full         = list(hyp = hyp        , bf = bf       , bf_type = bf_type),
equalities   = list(hyp = hyp_equal  , bf = BFequal  , bf_type = bf_type),
inequalities = list(hyp = hyp_inequal, bf = BFinequal, bf_type = bf_type))
class(output) <- c("summary.bmult", "list")
printRes <- paste('Bayes factor estimate:', bf_type, ':', bf,
'\n\nHypothesis:\n\n', hyp,
BFeq_message, BFineq_message, sep = ' ')
cat(printRes)
BFineq_message <- paste('\n\nInequality constrained Bayes factor(s):\n\n', bf_type, ':', BFinequal)
printRes <- paste('Bayes factor estimate:', bf_type, ':', bf,
'\n\nHypothesis:\n\n', hyp,
BFeq_message, BFineq_message, sep = ' ')
cat(printRes)
output
output$full
output$equalities
output <- list(full = list(hyp = hyp        , bf = bf       , bf_type = bf_type))
output
output <- data.frame(model = c('full'),
hypothesis = hyp,
bf         = bf)
output
bf_list <- x$bf_list
bf_type <- bf_list$bf_type
# Full Model
bf     <- signif(bf_list$bf[bf_type], 5)
hyp    <- paste(x$restrictions$full_model$hyp, collapse=" ")
output <- list(full = list(hyp = hyp        , bf = bf       , bf_type = bf_type))
# Equalities
BFequal      <- x$bf_list$logBFe_equalities
hyp_equal    <- .formatHypothesis(x$restrictions$equality_constraints$hyp)
BFeq_message <- NULL
if(!is.null(BFequal)){
if(bf_type == 'LogBFer') {
BFequal    <- BFequal
bf_type_eq <- 'LogBFe0'
} else if (bf_type == 'BFer'){
BFequal    <- exp(BFequal)
bf_type_eq <- 'BFe0'
} else if (bf_type == 'BFre'){
BFequal    <- 1/exp(BFequal)
bf_type_eq <- 'BF0e'
}
BFequal                <- paste(signif(BFequal, 5), collapse=' ')
BFeq_message           <- paste('\n\nEquality constrained Bayes factor(s):\n\n', bf_type_eq, ':', BFequal)
output[['equalities']] <- list(hyp = hyp_equal, bf = BFequal, bf_type = bf_type)
}
# Inequalities
BFinequal      <- x$bf_list$logBFe_inequalities[,'logBFe_inequalities']
hyp_inequal    <- .formatHypothesis(x$restrictions$inequality_constraints$hyp)
BFineq_message <- NULL
if(!is.null(BFinequal)){
if(bf_type == 'LogBFer') {
BFinequal <- BFinequal
} else if (bf_type == 'BFer'){
BFinequal <- exp(BFinequal)
} else if (bf_type == 'BFre'){
BFinequal <- 1/exp(BFinequal)
}
BFinequal                <- paste(signif(BFinequal, 5), collapse=' ')
BFineq_message           <- paste('\n\nInequality constrained Bayes factor(s):\n\n', bf_type, ':', BFinequal)
output[['inequalities']] <- list(hyp = hyp_inequal, bf = BFinequal, bf_type = bf_type)
}
class(output) <- c("summary.bmult", "list")
printRes <- paste('Bayes factor estimate:', bf_type, ':', bf,
'\n\nHypothesis:\n\n', hyp,
BFeq_message, BFineq_message, sep = ' ')
cat(printRes)
invisible(output)
output$inequalities
lapply(output_total$bridge_output, function(x) x$error_measures$percentage)
sapply(output_total$bridge_output, function(x) x$error_measures$percentage)
output[['inequalities']] <- list(hyp = hyp_inequal, bf = BFinequal, bf_type = bf_type, percentage_error = percentage_error)
percentage_error         <- sapply(x$bridge_output, function(x) x$error_measures$percentage)
percentage_error
output[['inequalities']] <- list(hyp = hyp_inequal, bf = BFinequal, bf_type = bf_type, percentage_error = percentage_error)
output
output$full
# devtools::create("bridgeineq")
# devtools::use_rcpp()
devtools::document()
devtools::install()
# Check the main function
output_total <- multBayesInformed(factorLevels, OR_index, a, x, niter, bf_type = 'BFer')
x            <- rep(10, 10)
# Check the main function
output_total <- multBayesInformed(factorLevels, OR_index, a, x, niter, bf_type = 'BFer')
print(output_total)
summary(output_total)
class(output_total)
devtools::install()
# Check the main function
output_total <- multBayesInformed(factorLevels, OR_index, a, x, niter, bf_type = 'BFer')
print(output_total)
summary(output_total)
#' print method for class \code{bmult}
#'
#' @param x object of class \code{bmult} as returned from \code{multBayesInformed}
#' @param ... further arguments, currently ignored
#' @return The print methods print the results and return nothing
#' @export
print.bmult <- function(x, ...){
# Bayes factor
bf_list <- x$bf_list
bf_type <- bf_list$bf_type
bf      <- signif(bf_list$bf[bf_type], 5)
hyp     <- paste(x$restrictions$full_model$hyp, collapse=" ")
# BF equalities
BFequal      <- x$bf_list$logBFe_equalities
nr_equal     <- length(BFequal)
BFeq_message <- NULL
if(!is.null(BFequal)){
if(bf_type == 'LogBFer') {
BFequal    <- sum(BFequal)
bf_type_eq <- 'LogBFe0'
} else if (bf_type == 'BFer'){
BFequal    <- prod(exp(BFequal))
bf_type_eq <- 'BFe0'
} else if (bf_type == 'BFre'){
BFequal    <- prod(1/exp(BFequal))
bf_type_eq <- 'BF0e'
}
BFequal      <- signif(BFequal, 5)
hypothesis   <- ifelse(nr_equal == 1, 'hypothesis', 'hypotheses')
BFeq_message <- paste('\n\nEquality constrained Bayes factor:\n\n', bf_type_eq, ':', BFequal,
'\n\nBased on', nr_equal, 'independent equality-constrained', hypothesis)
}
# BF inequalities
BFinequal      <- x$bf_list$logBFe_inequalities[,'logBFe_inequalities']
nr_inequal     <- length(BFinequal)
BFineq_message <- NULL
if(!is.null(BFinequal)){
if(bf_type == 'LogBFer') {
BFinequal <- sum(BFinequal)
} else if (bf_type == 'BFer'){
BFinequal <- prod(exp(BFinequal))
} else if (bf_type == 'BFre'){
BFinequal <- prod(1/exp(BFinequal))
}
BFinequal      <- signif(BFinequal, 5)
hypothesis     <- ifelse(nr_inequal == 1, 'hypothesis', 'hypotheses')
BFineq_message <- paste('\n\nInequality constrained Bayes factor:\n\n', bf_type, ':', BFinequal,
'\n\nBased on', nr_equal, 'independent inequality-constrained', hypothesis)
}
output <- paste('Bayes factor estimate:', bf_type, ':', bf,
'\n\nHypothesis:\n\n', hyp,
BFeq_message, BFineq_message, sep = ' ')
cat(output)
}
#' summary method for class \code{bmult}
#'
#' @param x object of class \code{bmult} as returned from \code{multBayesInformed}
#' @param ... further arguments, currently ignored
#' @return The summary method returns a \code{list} which contains the Bayes factor and associated hypotheses for the full
#' model, but also the separate for the independent equality and inequality constraints.
#' @export
summary.bmult <- function(x, ...){
bf_list <- x$bf_list
bf_type <- bf_list$bf_type
# Full Model
bf     <- signif(bf_list$bf[bf_type], 5)
hyp    <- paste(x$restrictions$full_model$hyp, collapse=" ")
output <- list(full = list(hyp = hyp        , bf = bf       , bf_type = bf_type))
# Equalities
BFequal      <- x$bf_list$logBFe_equalities
hyp_equal    <- .formatHypothesis(x$restrictions$equality_constraints$hyp)
BFeq_message <- NULL
if(!is.null(BFequal)){
if(bf_type == 'LogBFer') {
BFequal    <- BFequal
bf_type_eq <- 'LogBFe0'
} else if (bf_type == 'BFer'){
BFequal    <- exp(BFequal)
bf_type_eq <- 'BFe0'
} else if (bf_type == 'BFre'){
BFequal    <- 1/exp(BFequal)
bf_type_eq <- 'BF0e'
}
BFequal                <- paste(signif(BFequal, 5), collapse=' ')
BFeq_message           <- paste('\n\nEquality constrained Bayes factor(s):\n\n', bf_type_eq, ':', BFequal)
output[['equalities']] <- list(hyp = hyp_equal, bf = BFequal, bf_type = bf_type)
}
# Inequalities
BFinequal      <- x$bf_list$logBFe_inequalities[,'logBFe_inequalities']
hyp_inequal    <- .formatHypothesis(x$restrictions$inequality_constraints$hyp)
BFineq_message <- NULL
if(!is.null(BFinequal)){
if(bf_type == 'LogBFer') {
BFinequal <- BFinequal
} else if (bf_type == 'BFer'){
BFinequal <- exp(BFinequal)
} else if (bf_type == 'BFre'){
BFinequal <- 1/exp(BFinequal)
}
BFinequal                <- paste(signif(BFinequal, 5), collapse=' ')
BFineq_message           <- paste('\n\nInequality constrained Bayes factor(s):\n\n', bf_type, ':', BFinequal)
output[['inequalities']] <- list(hyp = hyp_inequal, bf = BFinequal, bf_type = bf_type)
}
class(output) <- c("summary.bmult", "list")
printRes <- paste('Bayes factor estimate:', bf_type, ':', bf,
'\n\nHypothesis:\n\n', hyp,
BFeq_message, BFineq_message, sep = ' ')
cat(printRes)
invisible(output)
}
print(output_total)
summary(output_total)
rm(list=ls())
# devtools::create("bridgeineq")
# devtools::use_rcpp()
devtools::document()
devtools::install()
OR_index  <- c('1 < 2 & 3 < 4 & 5 < 6 & 7 = 8 & 9 = 10')  # index representation
x            <- rep(10, 10)
a            <- rep(1, 10)
factorLevels <- paste('g', 1:10, sep='')
niter        <- 1e4
# Check the main function
output_total <- multBayesInformed(factorLevels, OR_index, a, x, niter, bf_type = 'BFer')
print(output_total)
summary(output_total)
lm <- summary(output_total)
lm
setwd("~/Dropbox/Projects/Multinomial Project/R/examples")
## Save data: Haberman, Mendelian Peas
dat <- read.table('lifestresses.csv', header = TRUE)
dat
## Save data: Haberman, Mendelian Peas
dat <- read.table('lifestresses.csv', header = TRUE, sep = ',')
dat
setwd("~/Dropbox/Projects/Multinomial Project/R/bridgeineq/data")
dat
save(dat, file="lifestresses/lifestresses.RData")
save(dat, file="lifestresses.RData")
peas  <- data.frame(peas   = factor('roundYellow', 'wrinkledYellow', 'roundGreen', 'wrinkledGreen'),
counts = c(315, 101, 108, 32))
peas
peas  <- data.frame(peas   = c('roundYellow', 'wrinkledYellow', 'roundGreen', 'wrinkledGreen'),
counts = c(315, 101, 108, 32))
peas
save(peas, file="mendelianPeas.RData")
# devtools::create("bridgeineq")
# devtools::use_rcpp()
devtools::document()
# devtools::create("bridgeineq")
# devtools::use_rcpp()
devtools::document()
